#-- encoding: UTF-8

#-- copyright
# OpenProject is an open source project management software.
# Copyright (C) 2012-2021 the OpenProject GmbH
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version 3.
#
# OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
# Copyright (C) 2006-2013 Jean-Philippe Lang
# Copyright (C) 2010-2013 the ChiliProject Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# See COPYRIGHT and LICENSE files for more details.
#++

module Relations::Scopes
  module Visible
    extend ActiveSupport::Concern

    class_methods do
      # Returns all relationships visible to the user. The relationships have to be:
      #   * Direct (not transitive and not reflexive) so they have to be user generated and not a relationship
      #     generated by the system.
      #   * Start (from_id) on a work package visible to the user (view_work_packages in the work package's project)
      #   * End (to_id) on a work package visible to the user (view_work_packages in the work package's project)
      # @param [User] user
      def visible(user = User.current)
        # Initially, a where(from_id: WorkPackage.visible).where(to_id: WorkPackage.visible)
        # was used. That approach lead to the partial index
        # '(hierarchy + relates + duplicates + follows + blocks + includes + requires = 1) AND relations.hierarchy = 0'
        # not being used, however.
        direct
          .joins(visible_join(user, :from_id, 'visible_from'))
          .joins(visible_join(user, :to_id, 'visible_to'))
      end

      def visible_join(user, relation_column, alias_name)
        relations_table = Relation.arel_table
        visible_table = Arel::Nodes::TableAlias.new(WorkPackage.visible(user).select(:id).arel, alias_name)

        relations_table
          .join(visible_table)
          .on(visible_table[:id].eq(relations_table[relation_column]))
          .join_sources
      end
    end
  end
end
